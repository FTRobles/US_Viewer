"""
@author: Jose Quevedo V.

This class setup and display the main window for the 4 views of the volume, Sagital, Axial, Coronal and 3D Volume. 
When the sliders in the ChangeVolumePropertiesWidget are moved this affect the three 2D views at the same time in the rotation, we can 
choose from the buttons which one we want to modificate by the displace slicer

Methods
    setupUi(self, main_window)
        This method is used to configure all the widgets of the main window, it contains a frame to display the 
        file selected and a tool bar whit a single bottom called "Open" whith a menu where the user can choose between MHD or VOL
        Input: It receives a QtWidgets.QMainWindow() object
        Output: None
            
    retranslateUi(self, Form)
        This method is auto generated by Qt Creator and set the string names in the window
        Input: Form is a QtWidget object
        Output: None
        
    changeAxis(self, tag):
        This method move the 3 views in the same axis the same degrees and update the views
        Input: tag is a char that indicates the axis to move, it can be X, Y or Z depending on the slider moved
        Output: None
        
    getViewSliceSagital(self):
        This method returns the ViewSlice object corresponding to the Sagital view 
        Input: None
        Output: viewSagital
            
    getViewSliceAxial(self):
        This method returns the ViewSlice object corresponding to the Axial view
        Input: None 
        Output: viewAxial
            
    getViewSliceCoronal(self):
        This method returns the ViewSlice object corresponding to the Coronal view
        Input: None
        Output:viewCoronal
            
    setSliceRotateSagital(self, slicer):
        This method sets the slicer correspondig to the Sagital view.
        Input: slicer it's a Slicer ojbect sent from the centralViewer
        Output: None
    
    setSliceRotateAxial(self, slicer):
        This method sets the slicer correspondig to the Axial view.
        Input: slicer it's a Slicer ojbect sent from the centralViewer
        Output: None
    
    setSliceRotateCoronal(self, slicer):
        This method sets the slicer correspondig to the Coronal view.
        Input: slicer it's a Slicer ojbect sent from the centralViewer
        Output: None

    setMax(self, max_vector):
        This method it's used to set the maximum and minimum displacement of each view.
        Input: max_vector it's sent from the centralViewer and it's a vector that contains the 
                maximum and minimum range of the volume.
        Output: None

    setViewToMove(self, viewSelected):
        This method it's activated when the view selected has changed. It set the corresponding 
        range and value to the horizontalSliderDesplazar depending on which view is selected.
        Input: viewSelected is a integer sent from centralViewer class that indicates the new view.
        Output: None
        
    changeDisplacement(self):
        This method it's ativated when the horizontalSliderDesplazar is moved and is used to travel
        through the axis selected.
        Input: None
        Output: None
        
    updateView(self):
        This method is used every time when any of the Slicers are modified to update the viewer
        Input: None
        Output: None
        
    setVolumeRotate(self, volumeData):
        This method sets the volume to work with
        Input: volumeData it's a Volume object 
        Output: None
        
Variables
        slicerSagital, slicerAxial, slicerCoronal
            This variables are Slicer objects correspondig on each view
        
        viewSagital, viewAxial, viewCoronal 
            This variables are ViewSlicer  objects correspondig on each view
        
        displacementSagital, displacementAxial, displacementCoronal
            This vectors are used to save the information of the displacement of each view
            They have three positions:
                0 - The minimum displacement
                1 - Current displace on the view (it can take values from the minimum to the maximun)
                2 - The maximun displacement
    
        
Constants 
    This constants are used to manage the three 2D views 
    X = 0
    Y = 1
    Z = 2
"""

from PyQt5 import QtCore, QtWidgets
from ClassSlicer  import Slicer
from classViewSlice import ViewSlice
from ClassVolume import Volume

X = 0
Y = 1
Z = 2

class Ui_ChangeSliceRotation(object):
    
    volume = Volume()
    def __init__(self):
        self.volume = Volume()
        
        self.slicerSagital = Slicer()
        self.viewSagital = ViewSlice()
        
        self.slicerAxial = Slicer()
        self.viewAxial = ViewSlice()
        
        self.slicerCoronal = Slicer()
        self.viewCoronal = ViewSlice()
        
        self.displacementSagital = [0.0,0.0,0.0]
        self.displacementAxial = [0.0,0.0,0.0]
        self.displacementCoronal = [0.0,0.0,0.0]
        
        # Which view we want to move
        # 0 = Sagital
        # 1 = Axial
        # 2 = Coronal
        self.viewSelected = 0
        
        return

    def setupUi(self, ChangeSliceRotation):
        # Begins code auto generated
        # This code is auto generated by Qt Creator
        ChangeSliceRotation.setObjectName("ChangeSliceRotation")
        ChangeSliceRotation.resize(386, 218)
        
        self.layoutWidget = QtWidgets.QWidget(ChangeSliceRotation)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 10, 361, 191))
        self.layoutWidget.setObjectName("layoutWidget")
        
        self.gridLayout_3 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        
        self.labelX = QtWidgets.QLabel(self.layoutWidget)
        self.labelX.setObjectName("labelX")
        self.horizontalLayout.addWidget(self.labelX)
        
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout)
        
        self.horizontalSliderX = QtWidgets.QSlider(self.layoutWidget)
        self.horizontalSliderX.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSliderX.setObjectName("horizontalSliderX")
        self.verticalLayout.addWidget(self.horizontalSliderX)
        
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        
        self.labelY = QtWidgets.QLabel(self.layoutWidget)
        self.labelY.setObjectName("labelY")
        self.horizontalLayout_4.addWidget(self.labelY)
        
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        
        self.horizontalSliderY = QtWidgets.QSlider(self.layoutWidget)
        self.horizontalSliderY.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSliderY.setObjectName("horizontalSliderY")
        self.verticalLayout.addWidget(self.horizontalSliderY)
        
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem4)
        
        self.labelZ = QtWidgets.QLabel(self.layoutWidget)
        self.labelZ.setObjectName("labelZ")
        self.horizontalLayout_5.addWidget(self.labelZ)
        
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem5)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        
        self.horizontalSliderZ = QtWidgets.QSlider(self.layoutWidget)
        self.horizontalSliderZ.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSliderZ.setObjectName("horizontalSliderZ")
        self.verticalLayout.addWidget(self.horizontalSliderZ)
        
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem6)
        
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem7)
        
        self.labelDesp = QtWidgets.QLabel(self.layoutWidget)
        self.labelDesp.setObjectName("labelDesp")
        self.horizontalLayout_7.addWidget(self.labelDesp)
        
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem8)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        
        self.horizontalSliderDesplazar = QtWidgets.QSlider(self.layoutWidget)
        self.horizontalSliderDesplazar.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSliderDesplazar.setObjectName("horizontalSliderDesplazar")
        self.verticalLayout.addWidget(self.horizontalSliderDesplazar)
        self.gridLayout_3.addLayout(self.verticalLayout, 0, 0, 1, 1)

        self.retranslateUi(ChangeSliceRotation)
        QtCore.QMetaObject.connectSlotsByName(ChangeSliceRotation)
        # Ends code auto generated
        
        # The range of the sliders is established.
        self.horizontalSliderX.setRange(-90.0,90.0)
        self.horizontalSliderY.setRange(-90.0,90.0)
        self.horizontalSliderZ.setRange(-90.0,90.0)
        self.horizontalSliderDesplazar.setRange(0.0,200.0)
        
        # All the sliders begins in the middle point
        self.horizontalSliderX.setValue(0.0)
        self.horizontalSliderY.setValue(0.0)
        self.horizontalSliderZ.setValue(0.0)
        self.horizontalSliderDesplazar.setValue(100.0)
        
        # These are the functions that are activated in case the sliders are moved.
        self.horizontalSliderX.valueChanged.connect(lambda: self.changeAxis("X"))
        self.horizontalSliderY.valueChanged.connect(lambda: self.changeAxis("Y"))
        self.horizontalSliderZ.valueChanged.connect(lambda: self.changeAxis("Z"))
        self.horizontalSliderDesplazar.valueChanged.connect(lambda: self.changeDisplacement())

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("ChangeSliceRotation", "ChangeSliceRotation"))
        self.labelX.setText(_translate("ChangeSliceRotation", "Eje X"))
        self.labelY.setText(_translate("ChangeSliceRotation", "Eje Y"))
        self.labelZ.setText(_translate("ChangeSliceRotation", "Eje Z"))
        self.labelDesp.setText(_translate("ChangeSliceRotation", "Desplazar"))


    def changeAxis(self, tag):
        # This condition checks for the axis selected and rotates the volume
        if (tag == "X"):
            self.volume.rotate(self.horizontalSliderX.value(), X)    
        elif (tag == "Y"):
            self.volume.rotate(self.horizontalSliderY.value(), Y)    
        elif (tag == "Z"):
            self.volume.rotate(self.horizontalSliderZ.value(), Z)  

        # The function updateView() is called to update the three views            
        self.updateView()
        return
    
    def updateView(self):
        #The three new views are obtained (displaced or rotated) and set to the viewer
        self.slicerSagital.setNewSliceSource(self.volume.getOutput())
        rotatedSliceSagital = self.slicerSagital.getOutput()
        self.viewSagital.setSlice(rotatedSliceSagital)
        
        self.slicerAxial.setNewSliceSource(self.volume.getOutput())
        rotatedSliceAxial = self.slicerAxial.getOutput()
        self.viewAxial.setSlice(rotatedSliceAxial)
        
        self.slicerCoronal.setNewSliceSource(self.volume.getOutput())
        rotatedSliceCoronal = self.slicerCoronal.getOutput()
        self.viewCoronal.setSlice(rotatedSliceCoronal)    
        return


    def getViewSliceSagital(self):
        return self.viewSagital
    
    def getViewSliceAxial(self):
        return self.viewAxial
    
    def getViewSliceCoronal(self):
        return self.viewCoronal
    
    def setSliceRotateSagital(self, slicer):
        self.slicerSagital = slicer
        return
    
    def setSliceRotateAxial(self, slicer):
        self.slicerAxial = slicer
        return
    
    def setSliceRotateCoronal(self, slicer):
        self.slicerCoronal = slicer
        return

    def setMax(self, max_vector): 
        # max_vector contains the maximum and minimum range of every axis
        
        # The minumum is set
        self.displacementSagital[0] = -max_vector[2]
        self.displacementAxial[0] = -max_vector[0]
        self.displacementCoronal[0] = -max_vector[1]
        
        # The maximum is set
        self.displacementSagital[2] = max_vector[2]
        self.displacementAxial[2] = max_vector[0]
        self.displacementCoronal[2] = max_vector[1]
        
        # By default the Sagital atributes are set because is the default view selected
        self.horizontalSliderDesplazar.setRange(self.displacementSagital[0],self.displacementSagital[2])
        self.horizontalSliderDesplazar.setValue(self.displacementSagital[1]) 
        return

    def setViewToMove(self, viewSelected):
        # The global variable is set
        self.viewSelected = viewSelected
        
        # The range values ​​of the displacement on each view are different and that is why we need to reset them and 
        # the value of the slider in every view is different
        # This condition checks for the view select and stablish that
        if viewSelected == 0:
            self.horizontalSliderDesplazar.setRange(self.displacementSagital[0],self.displacementSagital[2])
            self.horizontalSliderDesplazar.setValue(self.displacementSagital[1])
            
        elif viewSelected == 1:
            self.horizontalSliderDesplazar.setRange(self.displacementAxial[0],self.displacementAxial[2])
            self.horizontalSliderDesplazar.setValue(self.displacementAxial[1])
            
        elif viewSelected == 2:
            self.horizontalSliderDesplazar.setRange(self.displacementCoronal[0],self.displacementCoronal[2])
            self.horizontalSliderDesplazar.setValue(self.displacementCoronal[1]) 
        return

    def changeDisplacement(self):
        # The volume is displaced
        self.volume.displaceVolume(self.horizontalSliderDesplazar.value(), self.viewSelected)
        
        # Depending on the view selected the value of the slider is saved
        if(self.viewSelected == 0):
            self.displacementSagital[1] = self.horizontalSliderDesplazar.value()
        elif(self.viewSelected == 1):
            self.displacementAxial[1] = self.horizontalSliderDesplazar.value()
        elif(self.viewSelected == 2):    
            self.displacementCoronal[1] = self.horizontalSliderDesplazar.value()
        
        # The function updateView() is called to update the view    
        self.updateView()
        return


    def setVolumeRotate(self, volumeData):
        self.volume.setVolume(volumeData)
        return


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ChangeSliceRotation = QtWidgets.QWidget()
    ui = Ui_ChangeSliceRotation()
    ui.setupUi(ChangeSliceRotation)
    ChangeSliceRotation.show()
    sys.exit(app.exec_())

